// Employee Controller
// ========================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CoriCore.Data;
using CoriCore.DTOs;
using CoriCore.Interfaces;
using CoriCore.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace CoriCore.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IEmployeeService _employeeService;
        private readonly IUserService _userService;

        public EmployeeController(
            AppDbContext context,
            IEmployeeService employeeService,
            IUserService userService
        )
        {
            _context = context;
            _employeeService = employeeService;
            _userService = userService;
        }

        // POST: api/Employee/setup-user-as-employee
        /// <summary>
        /// Setup an existing user as an employee. This will create a new employee record and link it to the user.
        /// </summary>
        /// <param name="employeeDto">The employee DTO</param>
        /// <returns>The result of the operation</returns>
        [HttpPost("setup-user-as-employee")]
        public async Task<IActionResult> SetupUserAsEmployee([FromBody] EmployeeDto employeeDto)
        {
            var result = await _employeeService.RegisterEmployeeAsync(employeeDto);
            return StatusCode(result.Code, new { result.Message });
        }

        // POST: api/Employee/suspension-toggle/{employeeId}
        /// <summary>
        /// Toggle the suspension status of an employee (IsSuspended = true or false)
        /// </summary>
        /// <param name="employeeId">The ID of the employee</param>
        /// <returns>The result of the operation</returns>
        [HttpPost("suspension-toggle/{employeeId}")]
        public async Task<IActionResult> ToggleEmpSuspension(int employeeId)
        {
            var result = await _employeeService.ToggleEmpSuspensionAsync(employeeId);
            return StatusCode(result.Code, new { result.Message });
        }

        // GET: api/Employee/status-totals
        /// <summary>
        /// Get the total number of employees, and the totals of each employement status (including suspended)
        /// </summary>
        /// <returns>The total number of employees, and the totals of each employement status</returns>
        [HttpGet("status-totals")]
        public async Task<ActionResult<EmpTotalStatsDTO>> GetEmployeeStatusTotals()
        {
            var result = await _employeeService.GetEmployeeStatusTotals();
            return Ok(result);
        }

        // DELETE: api/Employee/{id}
        /// <summary>
        /// Delete an employee and set the associated user to Unassigned.
        /// </summary>
        /// <param name="id">The ID of the employee to delete.</param>
        /// <returns>The result of the operation.</returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteEmployee(int id)
        {
            // Get the employee to delete
            var employee = await _context.Employees.FindAsync(id);

            // Check if the employee exists
            if (employee == null)
            {
                return NotFound();
            }

            // Set the associated User's role to 0 (Unassigned)
            await _userService.SetUserRoleAsync(employee.UserId, (int)UserRole.Unassigned);

            // Delete the employee
            var result = await _employeeService.DeleteEmployeeByIdAsync(id);

            return StatusCode(result.Code, new { result.Message });
        }


        // AUTOGENERATED:
        // ========================================
        // GET: api/Employee
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Employee>>> GetEmployees()
        {
            return Ok(await _context.Employees.ToListAsync());
        }

        // GET: api/Employee/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Employee>> GetEmployee(int id)
        {
            var employee = await _context.Employees.FindAsync(id);

            if (employee == null)
            {
                return NotFound();
            }

            return Ok(employee);
        }

        // POST: api/Employee
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        // [HttpPost]
        // public async Task<ActionResult<Employee>> PostEmployee(Employee employee)
        // {
        //     _context.Employees.Add(employee);
        //     await _context.SaveChangesAsync();

        //     return CreatedAtAction("GetEmployee", new { id = employee.EmployeeId }, employee);
        // }

        // DELETE: api/Employee/5
        // [HttpDelete("{id}")]
        // public async Task<IActionResult> DeleteEmployee(int id)
        // {
        //     var employee = await _context.Employees.FindAsync(id);
        //     if (employee == null)
        //     {
        //         return NotFound();
        //     }

        //     _context.Employees.Remove(employee);
        //     await _context.SaveChangesAsync();

        //     return NoContent();
        // }

        // private bool EmployeeExists(int id)
        // {
        //     return _context.Employees.Any(e => e.EmployeeId == id);
        // }
    }
}
