// Admin Controller
// ========================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using CoriCore.Data;
using CoriCore.Models;
using CoriCore.Interfaces;
using CoriCore.DTOs;

namespace CoriCore.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AdminController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IAdminService _adminService;
        private readonly IUserService _userService;

        public AdminController(AppDbContext context, IAdminService adminService, IUserService userService)
        {
            _context = context;
            _adminService = adminService;
            _userService = userService;
        }

        /// <summary>
        /// Promote an existing user to admin (and create a new admin with userId)
        /// </summary>
        /// <param name="adminDTO">The admin DTO</param>
        /// <returns>The promoted admin</returns>
        // POST: api/Admin/promote-existing-user-to-admin
        [HttpPost("promote-existing-user-to-admin")]
        public async Task<ActionResult<Admin>> PromoteExistingUserToAdmin(AdminDTO adminDTO)
        {

            // Set the user role to admin
            var roleResult = await _userService.SetUserRoleAsync(adminDTO.UserId, (int)UserRole.Admin);
            if (roleResult != 201)
            {
                return BadRequest("Failed to set user role to admin");
            }

            // Create a new admin with the userId
            var result = await _adminService.CreateAdmin(adminDTO);

            if (result == null)
            {
                return BadRequest("Failed to create admin");
            }
            return Ok(result);
        }


        /// <summary>
        /// Get all admins
        /// </summary>
        /// <returns>The admins</returns>
        [HttpGet("admins")]
        public async Task<ActionResult<List<AdminUserDTO>>> GetAllAdmins()
        {
            var admins = await _adminService.GetAllAdmins();
            return Ok(admins);
        }


        /// <summary>
        /// Get an admin by admin ID
        /// </summary>
        /// <param name="adminId">The admin ID</param>
        /// <returns>The admin</returns>
        [HttpGet("adminUser/{adminId}")]
        public async Task<ActionResult<AdminUserDTO>> GetAdminUserByAdminId(int adminId)
        {
            var adminUser = await _adminService.GetAdminUserByAdminId(adminId);
            if (adminUser == null)
                return NotFound();

            return Ok(adminUser);
        }
        
        
        // AUTOGENERATED:
        // ========================================

        // // GET: api/Admin
        // [HttpGet]
        // public async Task<ActionResult<IEnumerable<Admin>>> GetAdmins()
        // {
        //     return await _context.Admins.ToListAsync();
        // }

        // // GET: api/Admin/5
        // [HttpGet("{id}")]
        // public async Task<ActionResult<Admin>> GetAdmin(int id)
        // {
        //     var admin = await _context.Admins.FindAsync(id);

        //     if (admin == null)
        //     {
        //         return NotFound();
        //     }

        //     return admin;
        // }

        // // PUT: api/Admin/5
        // // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        // [HttpPut("{id}")]
        // public async Task<IActionResult> PutAdmin(int id, Admin admin)
        // {
        //     if (id != admin.AdminId)
        //     {
        //         return BadRequest();
        //     }

        //     _context.Entry(admin).State = EntityState.Modified;

        //     try
        //     {
        //         await _context.SaveChangesAsync();
        //     }
        //     catch (DbUpdateConcurrencyException)
        //     {
        //         if (!AdminExists(id))
        //         {
        //             return NotFound();
        //         }
        //         else
        //         {
        //             throw;
        //         }
        //     }

        //     return NoContent();
        // }

        // // Already implemented as a custom method
        // // POST: api/Admin
        // // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        // // [HttpPost]
        // // public async Task<ActionResult<Admin>> PostAdmin(Admin admin)
        // // {
        // //     _context.Admins.Add(admin);
        // //     await _context.SaveChangesAsync();

        // //     return CreatedAtAction("GetAdmin", new { id = admin.AdminId }, admin);
        // // }

        // // DELETE: api/Admin/5
        // [HttpDelete("{id}")]
        // public async Task<IActionResult> DeleteAdmin(int id)
        // {
        //     var admin = await _context.Admins.FindAsync(id);
        //     if (admin == null)
        //     {
        //         return NotFound();
        //     }

        //     _context.Admins.Remove(admin);
        //     await _context.SaveChangesAsync();

        //     return NoContent();
        // }

        // private bool AdminExists(int id)
        // {
        //     return _context.Admins.Any(e => e.AdminId == id);
        // }
    }
}
